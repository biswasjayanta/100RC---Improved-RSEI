// ----------------------------------------
// REMOTE SENSING ECOLOGICAL INDEX (RSEI)
// Satellite: Landsat 8 Surface Reflectance & TOA
// Author: Jayanta Biswas
// ----------------------------------------

// 1. Define Area of Interest (AOI) and Date Range
var start = '2016-01-01';
var end = '2016-12-31';

// 2. Load Landsat 8 Surface Reflectance (SR) and apply scale factors & valid reflectance mask
var l8_sr = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
  .filterBounds(aoi)
  .filterDate(start, end)
  .filter(ee.Filter.lt('CLOUD_COVER', 5))
  .map(function(image) {
    var scaled = image.multiply(0.0000275).add(-0.2);
    var masked = scaled.updateMask(scaled.gte(0).and(scaled.lte(1)));
    return masked.copyProperties(image, ['system:time_start']);
  })
  .median()
  .clip(aoi);

// 3. Calculate NDVI, NDBSI, Wetness (TCW)
var ndvi = l8_sr.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');

var bi = l8_sr.normalizedDifference(['SR_B6', 'SR_B5']);
var si = l8_sr.normalizedDifference(['SR_B6', 'SR_B7']);
var ndbsi = bi.add(si).divide(2).rename('NDBSI');

var wetness = l8_sr.expression(
  '0.1509*B2 + 0.1973*B3 + 0.3279*B4 + 0.3406*B5 - 0.7112*B6 - 0.4572*B7',
  {
    'B2': l8_sr.select('SR_B2'),
    'B3': l8_sr.select('SR_B3'),
    'B4': l8_sr.select('SR_B4'),
    'B5': l8_sr.select('SR_B5'),
    'B6': l8_sr.select('SR_B6'),
    'B7': l8_sr.select('SR_B7')
  }).rename('Wetness');

// 4. Calculate LST using Landsat 8 TOA (Thermal Infrared Band)
var l8_toa = ee.ImageCollection("LANDSAT/LC08/C02/T1_TOA")
  .filterBounds(aoi)
  .filterDate(start, end)
  .filter(ee.Filter.lt('CLOUD_COVER', 5))
  .median()
  .clip(aoi);

var ndvi_toa = l8_toa.normalizedDifference(['B5', 'B4']).rename('NDVI');

var ndviMin = ee.Number(ndvi_toa.reduceRegion({
  reducer: ee.Reducer.min(), geometry: aoi, scale: 30, maxPixels: 1e9
}).values().get(0));

var ndviMax = ee.Number(ndvi_toa.reduceRegion({
  reducer: ee.Reducer.max(), geometry: aoi, scale: 30, maxPixels: 1e9
}).values().get(0));

var fv = ndvi_toa.subtract(ndviMin).divide(ndviMax.subtract(ndviMin)).pow(2).rename('FV');
var em = fv.multiply(0.004).add(0.986).rename('EM');
var thermal = l8_toa.select('B10').rename('thermal');

var lst = thermal.expression(
  '(TB / (1 + (0.00115 * (TB / 1.438)) * log(em))) - 273.15',
  {
    'TB': thermal.select('thermal'),
    'em': em
  }).rename('LST');

// 5. Compute UI, ISI, CVI (no EVI)
var swir = l8_sr.select('SR_B6');
var nir = l8_sr.select('SR_B5');
var red = l8_sr.select('SR_B4');
var blue = l8_sr.select('SR_B2');

// UI
var UI = swir.subtract(nir)
             .divide(swir.add(nir).add(1e-6))
             .updateMask(swir.add(nir).abs().gt(1e-4))
             .rename('UI');

// ISI
var ndvi_isi = nir.subtract(red).divide(nir.add(red).add(1e-6)).rename('NDVI_ISI');
var ndbi = swir.subtract(nir).divide(swir.add(nir).add(1e-6)).rename('NDBI');

var isi = ndbi.subtract(ndvi_isi)
              .divide(ndbi.add(ndvi_isi).add(1e-6))
              .updateMask(ndbi.add(ndvi_isi).abs().gt(1e-4))
              .rename('ISI');

// CVI
var savi = nir.subtract(red).divide(nir.add(red).add(0.5)).multiply(1.5).rename('SAVI');
var cvi = ndvi.multiply(savi).rename('CVI');

// 6. Visualization
Map.centerObject(aoi, 10);

Map.addLayer(ndvi, {min: 0, max: 1, palette: ['white', 'green']}, 'NDVI');
Map.addLayer(ndbsi, {min: 0, max: 0.5, palette: ['white', 'gray', 'black']}, 'NDBSI');
Map.addLayer(wetness, {min: -0.1, max: 0.1, palette: ['brown', 'blue']}, 'Wetness');
Map.addLayer(lst, {min: 10, max: 40, palette: ['blue', 'yellow', 'red']}, 'LST');
Map.addLayer(UI, {min: -1, max: 1, palette: ['blue', 'white', 'red']}, 'UI');
Map.addLayer(isi, {min: -1, max: 1, palette: ['blue', 'white', 'red']}, 'ISI');
Map.addLayer(cvi, {min: 0, max: 1, palette: ['white', 'green']}, 'CVI');

// 7. Export All Layers to Google Drive
function exportBand(band, name) {
  Export.image.toDrive({
    image: band,
    description: name + '_16',
    folder: 'GEE_RSEI',
    fileNamePrefix: name + '_16',
    region: aoi,
    scale: 30,
    maxPixels: 1e13
  });
}

// Export each index
exportBand(ndvi, 'NDVI');
exportBand(ndbsi, 'NDBSI');
exportBand(wetness, 'Wetness');
exportBand(lst, 'LST');
exportBand(UI, 'UI');
exportBand(isi, 'ISI');
exportBand(cvi, 'CVI');
